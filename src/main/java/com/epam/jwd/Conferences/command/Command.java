package com.epam.jwd.Conferences.command;

/**
 * The interface to implement commands in the application.
 */
public interface Command {

    // принимает запрос(request), что-то делает и возвращает респонз (CommandResponse)
    // паттерн Commander позволяет выполнять из одного места различные между собой бизнес-кейсы,
    // которые друг от друга сильно не зависят, но при этом нужно из одного места выполнять все бизнес-кейсы,
    // в зависимости от того, какой потребуется.
    // В нашем случае подходит, т.к. все бизнес-кейсы планируем выполнять изнутри сервлета Controller
    CommandResponse execute (CommandRequest request);

    // делаем статический метод withName, который возвращает команду
    // Т.е. если кто-то попросил команду по имени в этом статическом методе сходим в метод of из AppComand,
    // проитерируемся по всем константам, найдем ту, название которой совпадает со строкой,
    // а если не найдем - вернем DEFAULT, а так как в константе хранится поле команда,
    // после того как получили константу, зная, что у нее в поле храниться команда -
    // методом getCommand вытащим эту команду и вернем.
    static Command withName(String name) {
        return AppCommand.of(name).getCommand();
    }
}
